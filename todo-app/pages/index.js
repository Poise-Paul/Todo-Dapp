import Head from "next/head";
import styles from "@/styles/Home.module.css";
import { useState, useEffect } from "react";
import TaskAbi from "./abi/TaskContract";
import Web3 from "web3";
import { ethers } from "ethers";
import { CONTRACT_ADDRESS } from "@/config";
import { DeleteIcon } from "./components/Comps";
import { BounceLoader } from "react-spinners";

export default function Home() {
  const [tasks, setTasks] = useState([]);
  const [input, setInput] = useState("");
  const [currentAccount, setCurrentAccount] = useState("");
  const [correctNetwork, setCorrectNetwork] = useState(false);
  const [loading, setLoading] = useState(false);
  const connectWallet = async () => {
    try {
      const { ethereum } = window;
      if (!ethereum) {
        console.log("Metamask was not detected");
      }
      let chainId = await ethereum.request({ method: "eth_chainId" });
      console.log(`Connected to chain: ${chainId}`);

      const goerliChainId = "0x5";
      if (chainId !== goerliChainId) {
        alert("You're not conected to Goerli Network");
        return;
      } else {
        setCorrectNetwork(true);
      }

      const accounts = await ethereum.request({
        method: "eth_requestAccounts",
      });
      console.log(`Found account: ${accounts[0]}`);
      setCurrentAccount(accounts[0]);
    } catch (error) {
      console.log(`Error Connecting to Metamask ${error}`);
    }
  };
  const { abi } = require("./abi/TaskContract.json");

  const addTask = async (e) => {
    e.preventDefault();
    const newTask = {
      taskText: input,
      isDeleted: false,
    };
    try {
      const web3 = new Web3(window.ethereum);
      const taskContractInstance = new web3.eth.Contract(abi, CONTRACT_ADDRESS);
      const accounts = await web3.eth.getAccounts();
      const userAddress = accounts[0];
      setLoading(true);
      taskContractInstance.methods
        .addTask(newTask.taskText, newTask.isDeleted)
        .send({ from: userAddress })
        .then((res) => {
          setTasks([...tasks, { taskText: input, id: tasks[0].id + 1 }]);
          setInput("");
        })
        .catch((err) => console.error(err));
    } catch (error) {
      console.error(`Something went wrong ðŸ”´ ${error.message}`);
    }
  };

  useEffect(() => {
    const makeCall = async () => {
      const web3 = new Web3(window.ethereum);
      const taskContractInstance = new web3.eth.Contract(abi, CONTRACT_ADDRESS);
      const accounts = await web3.eth.getAccounts();
      const userAddress = accounts[0];
      const result = await taskContractInstance.methods
        .getMyTasks()
        .call({ from: userAddress });
      setTasks(result);
      setLoading(false);
    };
    makeCall();
  }, [tasks]);

  const deleteTask = async (id, isDeleted) => {
    alert("Are you sure you want to delete this task from the blockchain");
    setLoading(true);
    const web3 = new Web3(window.ethereum);
    const taskContractInstance = new web3.eth.Contract(abi, CONTRACT_ADDRESS);
    const accounts = await web3.eth.getAccounts();
    const userAddress = accounts[0];
    const myContract = await taskContractInstance.methods
      .deleteTask(id, isDeleted)
      .send({ from: userAddress });
    const filteredTasks = tasks.filter((task) => task.id !== id);
    setTasks(filteredTasks);
  };
  return (
    <>
      <Head>
        <title>Decentralized Todo App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="justify-center p-10 items-center flex flex-col">
        {currentAccount ? (
          <div className="bg-green-500/50 font-semibold p-2 rounded-md text-green-700">
            Connected to: {currentAccount}{" "}
          </div>
        ) : (
          <button
            onClick={connectWallet}
            className="bg-blue-700 rounded-lg text-white p-2"
          >
            Connect Wallet
          </button>
        )}

        {currentAccount && (
          <>
            <div className="mt-10">
              <h1 className="font-bold text-3xl text-center mb-5">Task App</h1>
              <form onSubmit={addTask} className="w-full">
                <input
                  type="text"
                  placeholder="Enter New Task"
                  value={input}
                  onChange={(e) => setInput(e.target.value)}
                  className="bg-gray-200 w-[80%] p-2 rounded-md"
                />
                <button
                  type="submit"
                  className="bg-blue-700 ml-2 w-[15%] p-2 rounded-md text-white font-medium"
                >
                  Add Task
                </button>
              </form>
              {/* List of All Tasks */}
              <div className="bg-gray-200 mt-20 w-[50rem] rounded-md p-2">
                <div className="flex justify-between my-3">
                  <strong className="text-2xl">All Tasks</strong>
                </div>
                <div className="flex flex-col gap-3">
                  {tasks.map((task, key) => {
                    return (
                      <div
                        key={key}
                        className="bg-gray-300 hover:bg-gray-400 transition-all duration-300 ease-in-out rounded-md flex justify-between p-2"
                      >
                        <p className="font-medium">{task.taskText}</p>
                        <div onClick={() => deleteTask(task.id, true)}>
                          <DeleteIcon />
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          </>
        )}
        {/* Loader */}

        {loading && (
          <div className="flex flex-col justify-center">
            <BounceLoader
              color="#1C4ED8"
              loading={loading}
              size={50}
              aria-label="Bounce Spinner"
              data-testid="loader"
            />
            <span className="italic">Adding New Task</span>
          </div>
        )}
      </main>
    </>
  );
}
